#!/usr/bin/zsh

export DIR=$(cd -P -- "$(dirname -- "$0")" && pwd -P)

# Install zsh
echo 'Install oh-my-zsh'
echo '-----------------'
rm -rf $HOME/.oh-my-zsh
curl -L https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh

# Add global gitignore
rm -f $HOME/.global-gitignore
ln -s $DIR/shell/.global-gitignore $HOME/.global-gitignore
git config --global core.excludesfile $HOME/.global-gitignore

# Symlink zsh prefs
rm -f $HOME/.zshrc
ln -s $DIR/shell/.zshrc $HOME/.zshrc

# Symlink vim prefs
rm -f $HOME/.vimrc
ln -s $DIR/shell/.vimrc $HOME/.vimrc
rm -f $HOME/.vim
ln -s $DIR/shell/.vim $HOME/.vim

# Activate z
chmod +x ./shell/z.sh

echo 'Install NVM and Node'
echo '----------------'
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

nvm install 18
nvm use 18

echo 'Install PHP'
echo '----------------'
sudo apt-get install -y php php-xml php-redis php-imap php-intl php-gmagick php-soap php-gd php-curl php-zip php-apcu php-xdebug php-mailparse

echo 'Install Image Dependencies'
echo '----------------'
sudo apt-get install -y jpegoptim optipng pngquant gifsicle webp
sudo npm install -g svgo@1.3.2

echo 'Install composer'
echo '----------------'
EXPECTED_COMPOSER_CHECKSUM="$(curl https://composer.github.io/installer.sig)"
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
ACTUAL_COMPOSER_CHECKSUM="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"
if [ "$EXPECTED_COMPOSER_CHECKSUM" != "$ACTUAL_COMPOSER_CHECKSUM" ]
then
    >&2 echo 'ERROR: Invalid installer checksum'
    rm composer-setup.php
    exit 1
fi
php composer-setup.php
rm composer-setup.php
sudo mv composer.phar /usr/local/bin/composer

sudo ln -s $DIR/misc/php-limits.ini /etc/php/8.1/apache2/conf.d/php-z-custom-limits.ini
sudo ln -s $DIR/misc/php-limits.ini /etc/php/8.1/cli/conf.d/php-z-custom-limits.ini

echo 'Set right composer path'
export PATH="$HOME/.composer/vendor/bin:$PATH"

echo 'Install laravel installer'
echo '---------------------'
composer global require laravel/installer

echo 'Install hub (https://github.com/github/hub)'
echo '----------------'
sudo apt install -y hub

echo 'Install docker'
echo '----------------'
sudo apt-get update
sudo apt-get install \
    ca-certificates \
    curl \
    gnupg \
    lsb-release

sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update
sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

echo 'Install DDEV'
echo '----------------'
curl https://apt.fury.io/drud/gpg.key | sudo apt-key add -
echo "deb https://apt.fury.io/drud/ * *" | sudo tee -a /etc/apt/sources.list.d/ddev.list
sudo apt update && sudo apt install -y ddev mkcert

echo 'Install thefuck'
echo '----------------'
sudo apt update
sudo apt install python3-dev python3-pip python3-setuptools
pip3 install thefuck --user

echo 'Install mackup'
echo '----------------'
pip install --upgrade mackup

echo 'Install ngrok'
echo '----------------'
curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null && echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list && sudo apt update && sudo apt install ngrok

echo 'Install mkdocs'
echo '--------------'
pip3 install mkdocs && pip3 install mkdocs-material

echo 'Init Git'
git config --global init.defaultBranch main
git config --global push.default current
git config --global hub.protocol ssh


echo '++++++++++++++++++++++++++++++'
echo '++++++++++++++++++++++++++++++'
echo 'All done!'
echo '++++++++++++++++++++++++++++++'
echo 'Some optional tidbits'

echo '1. Make sure dropbox is running first. If you have not backed up via Mackup yet, then run `mackup backup` to symlink preferences for a wide collection of apps to your dropbox. If you already had a backup via mackup run `mackup restore` You'\''ll find more info on Mackup here: https://github.com/lra/mackup.'
echo '2. Set some sensible defaults by running: $HOME/.dotfiles/linux/set-defaults.sh'
echo '3. Install some helpful apps by running: $HOME/.dotfiles/linux/apps.sh'
echo '4. Make a .dotfiles-custom/shell/.aliases for your personal commands'
echo '5. Office 365, Cloudya and Sonos can not be installed automatically. Please do to manually if you want to.'

echo '++++++++++++++++++++++++++++++'
echo '++++++++++++++++++++++++++++++'
